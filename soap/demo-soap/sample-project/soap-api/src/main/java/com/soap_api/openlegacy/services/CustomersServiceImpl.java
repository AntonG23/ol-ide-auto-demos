package com.soap_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.soap_sdk.openlegacy.GetCustomer;
import com.soap_sdk.openlegacy.GetCustomerAddress;
import com.soap_sdk.openlegacy.GetCustomerCustomer;
import com.soap_sdk.openlegacy.GetCustomerGetCustomerRequest;
import com.soap_sdk.openlegacy.GetCustomerGetCustomerResponse;
import com.soap_sdk.openlegacy.GetCustomerInputParams;
import com.soap_sdk.openlegacy.GetCustomerOutputParams;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test CustomersServiceTest.
 *  The interface CustomersService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "Customers")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class CustomersServiceImpl implements CustomersService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getCustomers", entities = {
            @EntityMapping(alias="getCustomer", entity=com.soap_sdk.openlegacy.GetCustomer.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "getCustomer.inputParams.getCustomerRequest.customerId", expression = "customerId")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "outputParams", expression = "getCustomer.outputParams")})
    public CustomersOut getCustomers(CustomersIn customersIn) throws Exception {
        CustomersOut customersOut = new CustomersOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession soapSdkSession = applicationContext.getBean("soapSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            GetCustomer getCustomer = serviceBinder.bindInputs(this, "getCustomers", "getCustomer", new GetCustomer(), customersIn);
            getCustomer = soapSdkSession.doAction(ActionUtil.getRpcAction(GetCustomer.class), getCustomer);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            customersOut = serviceBinder.bindOutput(this, "getCustomers", customersOut, new String[]{"customersIn", "getCustomer"}, customersIn, getCustomer);
            /* autogenerated - output block end */;

            return customersOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            soapSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
