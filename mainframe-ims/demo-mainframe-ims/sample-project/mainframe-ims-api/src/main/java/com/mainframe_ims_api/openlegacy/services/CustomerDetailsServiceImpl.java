package com.mainframe_ims_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.mainframe_ims_sdk.openlegacy.Phonebookrecord;
import com.mainframe_ims_sdk.openlegacy.PhonebookrecordPhonebookrecordInput;
import com.mainframe_ims_sdk.openlegacy.PhonebookrecordPhonebookrecordOutput;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test CustomerDetailsServiceTest.
 *  The interface CustomerDetailsService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "CustomerDetails")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class CustomerDetailsServiceImpl implements CustomerDetailsService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getCustomerDetails", entities = {
            @EntityMapping(alias="phonebookrecord", entity=com.mainframe_ims_sdk.openlegacy.Phonebookrecord.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "phonebookrecord.phonebookrecordInput.inCommand", expression = "inCommand"),
            @BindTo(endpoint = "phonebookrecord.phonebookrecordInput.inLastName", expression = "inLastName")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "phonebookrecordOutput", expression = "phonebookrecord.phonebookrecordOutput")})
    public CustomerDetailsOut getCustomerDetails(CustomerDetailsIn customerDetailsIn) throws Exception {
        CustomerDetailsOut customerDetailsOut = new CustomerDetailsOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession mainframeImsSdkSession = applicationContext.getBean("mainframeImsSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Phonebookrecord phonebookrecord = serviceBinder.bindInputs(this, "getCustomerDetails", "phonebookrecord", new Phonebookrecord(), customerDetailsIn);
            phonebookrecord = mainframeImsSdkSession.doAction(ActionUtil.getRpcAction(Phonebookrecord.class), phonebookrecord);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            customerDetailsOut = serviceBinder.bindOutput(this, "getCustomerDetails", customerDetailsOut, new String[]{"customerDetailsIn", "phonebookrecord"}, customerDetailsIn, phonebookrecord);
            /* autogenerated - output block end */;

            return customerDetailsOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            mainframeImsSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
