package com.as400_cobol_rpc_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.as400_cobol_rpc_sdk.openlegacy.Itemdetails;
import com.as400_cobol_rpc_sdk.openlegacy.ItemdetailsItemRecord;
import com.as400_cobol_rpc_sdk.openlegacy.ItemdetailsShipping;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test ItemDetailsServiceTest.
 *  The interface ItemDetailsService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "ItemDetails")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class ItemDetailsServiceImpl implements ItemDetailsService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getItemDetails", entities = {
            @EntityMapping(alias="itemdetails", entity=com.as400_cobol_rpc_sdk.openlegacy.Itemdetails.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "itemdetails.itemNum", expression = "itemNumber")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "itemdetails", expression = "itemdetails")})
    public ItemDetailsOut getItemDetails(ItemDetailsIn itemDetailsIn) throws Exception {
        ItemDetailsOut itemDetailsOut = new ItemDetailsOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession as400CobolRpcSdkSession = applicationContext.getBean("as400CobolRpcSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Itemdetails itemdetails = serviceBinder.bindInputs(this, "getItemDetails", "itemdetails", new Itemdetails(), itemDetailsIn);
            itemdetails = as400CobolRpcSdkSession.doAction(ActionUtil.getRpcAction(Itemdetails.class), itemdetails);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            itemDetailsOut = serviceBinder.bindOutput(this, "getItemDetails", itemDetailsOut, new String[]{"itemDetailsIn", "itemdetails"}, itemDetailsIn, itemdetails);
            /* autogenerated - output block end */;

            return itemDetailsOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            as400CobolRpcSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
